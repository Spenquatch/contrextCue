/* tslint:disable */
/* eslint-disable */
/**
 * ContrextCue Sidecar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SettingsRequest } from '../models';
// @ts-ignore
import type { SettingsResponse } from '../models';
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the complete current settings configuration from the application state.                        Returns all settings categories:            - Custom prompts and their mapping to triggers            - Default insertion modes (append/replace)            - Clipboard and auto-paste behaviors            - Advanced settings including warm-up and logging options                        Used by the settings UI to display current configuration.
         * @summary Retrieve current application settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsApiV1SettingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the application\'s settings with the provided configuration.                          Handles updating all settings categories:             - Custom trigger-to-prompt mappings             - Default insertion modes             - Clipboard and auto-paste behavior settings             - Advanced settings like model warm-up and debugging options                          Returns no content on success; settings are applied immediately.
         * @summary Update application settings
         * @param {SettingsRequest} settingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingsApiV1SettingsPost: async (settingsRequest: SettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingsRequest' is not null or undefined
            assertParamExists('updateSettingsApiV1SettingsPost', 'settingsRequest', settingsRequest)
            const localVarPath = `/api/v1/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the complete current settings configuration from the application state.                        Returns all settings categories:            - Custom prompts and their mapping to triggers            - Default insertion modes (append/replace)            - Clipboard and auto-paste behaviors            - Advanced settings including warm-up and logging options                        Used by the settings UI to display current configuration.
         * @summary Retrieve current application settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingsApiV1SettingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingsApiV1SettingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.getSettingsApiV1SettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the application\'s settings with the provided configuration.                          Handles updating all settings categories:             - Custom trigger-to-prompt mappings             - Default insertion modes             - Clipboard and auto-paste behavior settings             - Advanced settings like model warm-up and debugging options                          Returns no content on success; settings are applied immediately.
         * @summary Update application settings
         * @param {SettingsRequest} settingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettingsApiV1SettingsPost(settingsRequest: SettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettingsApiV1SettingsPost(settingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.updateSettingsApiV1SettingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * Retrieves the complete current settings configuration from the application state.                        Returns all settings categories:            - Custom prompts and their mapping to triggers            - Default insertion modes (append/replace)            - Clipboard and auto-paste behaviors            - Advanced settings including warm-up and logging options                        Used by the settings UI to display current configuration.
         * @summary Retrieve current application settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsApiV1SettingsGet(options?: RawAxiosRequestConfig): AxiosPromise<SettingsResponse> {
            return localVarFp.getSettingsApiV1SettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the application\'s settings with the provided configuration.                          Handles updating all settings categories:             - Custom trigger-to-prompt mappings             - Default insertion modes             - Clipboard and auto-paste behavior settings             - Advanced settings like model warm-up and debugging options                          Returns no content on success; settings are applied immediately.
         * @summary Update application settings
         * @param {SettingsRequest} settingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingsApiV1SettingsPost(settingsRequest: SettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSettingsApiV1SettingsPost(settingsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * Retrieves the complete current settings configuration from the application state.                        Returns all settings categories:            - Custom prompts and their mapping to triggers            - Default insertion modes (append/replace)            - Clipboard and auto-paste behaviors            - Advanced settings including warm-up and logging options                        Used by the settings UI to display current configuration.
     * @summary Retrieve current application settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getSettingsApiV1SettingsGet(options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).getSettingsApiV1SettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the application\'s settings with the provided configuration.                          Handles updating all settings categories:             - Custom trigger-to-prompt mappings             - Default insertion modes             - Clipboard and auto-paste behavior settings             - Advanced settings like model warm-up and debugging options                          Returns no content on success; settings are applied immediately.
     * @summary Update application settings
     * @param {SettingsRequest} settingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public updateSettingsApiV1SettingsPost(settingsRequest: SettingsRequest, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).updateSettingsApiV1SettingsPost(settingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

